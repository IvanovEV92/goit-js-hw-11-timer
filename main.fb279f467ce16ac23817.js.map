{"version":3,"sources":["webpack:///./timer.js"],"names":["refs","daysRef","document","querySelector","hoursRef","minsRef","secsRef","selector","targetDate","this","days","hours","mins","secs","getIdDate","Date","parse","getTimer","setInterval","currentDate","now","deltaTime","timing","updateTimer","time","pad","Math","floor","textContent","String","padStart"],"mappings":"iJAAMA,EAAO,CACXC,QAASC,SAASC,cAAc,2BAChCC,SAAUF,SAASC,cAAc,4BACjCE,QAASH,SAASC,cAAc,2BAChCG,QAASJ,SAASC,cAAc,4BAwDb,I,WArDnB,cAAsC,IAAxBI,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,EAClBC,KAAKC,KACLD,KAAKE,MACLF,KAAKG,KACLH,KAAKI,K,2BAEPC,UAAA,WACEL,KAAKD,WAAaO,KAAKC,MAAM,IAAID,KAAKN,KAAKD,aAC3CC,KAAKQ,Y,EAEPA,SAAA,WAAW,WACTC,aAAY,WACV,IAAMC,EAAcJ,KAAKK,MACnBC,EAAY,EAAKb,WAAaW,EACpC,EAAKG,OAAOD,KACX,M,EAGLE,YAAA,WAAc,WACZL,aAAY,WACV,GAAI,EAAKR,MAAQ,GAAK,EAAKC,OAAS,GAAK,EAAKC,KAAO,EAAG,CACtD,EAAKJ,WAAa,IAAIO,KACpBA,KAAKC,MAAM,IAAID,MAAU,SAE3B,IAAMI,EAAcJ,KAAKK,MACnBC,EAAY,EAAKb,WAAaW,EACpC,EAAKG,OAAOD,MAEb,M,EAELC,OAAA,SAAOE,GACLf,KAAKC,KAAOD,KAAKgB,IAAIC,KAAKC,MAAMH,EAAO,QACvCxB,EAAKC,QAAQ2B,YAAb,GAA8BnB,KAAKC,KAEnCD,KAAKE,MAAQF,KAAKgB,IAChBC,KAAKC,MAAOH,EAAO,MAAR,OAEbxB,EAAKI,SAASwB,YAAd,GAA+BnB,KAAKE,MAEpCF,KAAKG,KAAOH,KAAKgB,IAAIC,KAAKC,MAAOH,EAAO,KAAR,MAChCxB,EAAKK,QAAQuB,YAAb,GAA8BnB,KAAKG,KACnCH,KAAKI,KAAOJ,KAAKgB,IAAIC,KAAKC,MAAOH,EAAO,IAAe,MACvDxB,EAAKM,QAAQsB,YAAb,GAA8BnB,KAAKI,KACnCJ,KAAKc,e,EAGPE,IAAA,SAAID,GACF,OAAOK,OAAOL,GAAMM,SAAS,EAAG,M,KAIf,CAAmB,CACtCvB,SAAU,WACVC,WAAY,IAAIO,KAAK,kBAEVD,Y","file":"main.fb279f467ce16ac23817.js","sourcesContent":["const refs = {\n  daysRef: document.querySelector('span[data-value=\"days\"]'),\n  hoursRef: document.querySelector('span[data-value=\"hours\"]'),\n  minsRef: document.querySelector('span[data-value=\"mins\"]'),\n  secsRef: document.querySelector('span[data-value=\"secs\"]'),\n};\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.days;\n    this.hours;\n    this.mins;\n    this.secs;\n  }\n  getIdDate() {\n    this.targetDate = Date.parse(new Date(this.targetDate));\n    this.getTimer();\n  }\n  getTimer() {\n    setInterval(() => {\n      const currentDate = Date.now();\n      const deltaTime = this.targetDate - currentDate;\n      this.timing(deltaTime);\n    }, 1000);\n  }\n\n  updateTimer() {\n    setInterval(() => {\n      if (this.days <= 0 && this.hours <= 0 && this.mins < 0) {\n        this.targetDate = new Date(\n          Date.parse(new Date()) + 365 * 24 * 60 * 60 * 1000,\n        );\n        const currentDate = Date.now();\n        const deltaTime = this.targetDate - currentDate;\n        this.timing(deltaTime);\n      }\n    }, 1000);\n  }\n  timing(time) {\n    this.days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    refs.daysRef.textContent = `${this.days}`;\n\n    this.hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    refs.hoursRef.textContent = `${this.hours}`;\n\n    this.mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    refs.minsRef.textContent = `${this.mins}`;\n    this.secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    refs.secsRef.textContent = `${this.secs}`;\n    this.updateTimer();\n  }\n\n  pad(time) {\n    return String(time).padStart(2, '0');\n  }\n}\n\nconst newYearTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jan 1, 2022 '),\n});\nnewYearTimer.getIdDate();\n"],"sourceRoot":""}